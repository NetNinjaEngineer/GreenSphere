// <auto-generated />
using System;
using GreenSphere.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GreenSphere.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250208085017_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GreenSphere.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("GreenSphere.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CodeExpiration")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "702C7401-F83C-4684-9421-9AA74FC40050",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb8b431c-1fb3-410f-9e53-719b3011e003",
                            DateOfBirth = new DateOnly(2002, 1, 1),
                            Email = "me5260287@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mohamed",
                            Gender = "Male",
                            LastName = "Ehab",
                            LockoutEnabled = false,
                            NormalizedEmail = "ME5260287@GMAIL.COM",
                            NormalizedUserName = "MOEHAB@2002",
                            PasswordHash = "AQAAAAIAAYagAAAAEIpvPzyc+4jjcdxIPp6MA2gnr1gohK7Oejy2l1qwowXqfOaaO9gS7HCwh6ve+Qd0ng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "20b03ea1-7528-4254-aabb-eb4c219c9fe7",
                            TwoFactorEnabled = false,
                            UserName = "Moehab@2002"
                        },
                        new
                        {
                            Id = "3EB45CDA-F2EE-43E7-B9F1-D52562E05929",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fcfff429-b29a-497d-890c-bd32bb332b98",
                            DateOfBirth = new DateOnly(1990, 5, 15),
                            Email = "johndoe@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            Gender = "Male",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHNDOE@EXAMPLE.COM",
                            NormalizedUserName = "JOHNDOE@123",
                            PasswordHash = "AQAAAAIAAYagAAAAECvR0C7KPe6e9sITfDnGQ1knD6jJ4AQN139xWIcXyWpzkZzGkiEhnUf8cWt2XNlgfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c200f523-6f0b-4c49-b8b8-c060c14a5a41",
                            TwoFactorEnabled = false,
                            UserName = "JohnDoe@123"
                        },
                        new
                        {
                            Id = "9818FAE0-A167-4808-A30D-BC7418A53CB0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "83882df3-e2c5-4798-ac70-7b70c7fede63",
                            DateOfBirth = new DateOnly(1985, 8, 22),
                            Email = "janesmith@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            Gender = "Female",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "JANESMITH@EXAMPLE.COM",
                            NormalizedUserName = "JANESMITH@456",
                            PasswordHash = "AQAAAAIAAYagAAAAEAC3JpRPxyLBNkEeeRrzSB8DyJE/3AD8bC1jW+Pz3RRN0GPUmmO+Yi7FfSuyag5sRQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d65e2c1a-3aeb-4acd-9237-81643f64c8dd",
                            TwoFactorEnabled = false,
                            UserName = "JaneSmith@456"
                        },
                        new
                        {
                            Id = "FE2FB445-6562-49DD-B0A3-77E0A3A1C376",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd5cd245-7d50-456f-aca6-0a2437dfdbe9",
                            DateOfBirth = new DateOnly(1995, 3, 10),
                            Email = "alicej@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            Gender = "Female",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICEJ@EXAMPLE.COM",
                            NormalizedUserName = "ALICEJ@789",
                            PasswordHash = "AQAAAAIAAYagAAAAEAS5WzGgwbyoLOjuNgKPIwNikX97I7dSg6eMBzbqcV/hdcPbG5bjJD6gXb6wga2EBw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5f59cbc4-5d10-45ec-b1f9-172c6cb71025",
                            TwoFactorEnabled = false,
                            UserName = "AliceJ@789"
                        },
                        new
                        {
                            Id = "0821819C-64AE-4C73-96F2-4E607AA59D7E",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b84cf3d0-e5ab-49e2-9106-69588a4c2e6a",
                            DateOfBirth = new DateOnly(1980, 12, 5),
                            Email = "bobbrown@example.com",
                            EmailConfirmed = true,
                            FirstName = "Bob",
                            Gender = "Male",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOBBROWN@EXAMPLE.COM",
                            NormalizedUserName = "BOBBROWN@101",
                            PasswordHash = "AQAAAAIAAYagAAAAEKhrxcfuWxhDpPbA0//BSvTPZCjLyP7NrlfG6qZ+vNbqSG5AvICK6RHmhRjito/DAQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "435071af-273a-41b1-b85f-f9dd4021cb6a",
                            TwoFactorEnabled = false,
                            UserName = "BobBrown@101"
                        },
                        new
                        {
                            Id = "5B91855C-2D98-4E2B-B919-CDE322C9002D",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e699a7c-4c44-4a5a-a00f-6689ba3d830e",
                            DateOfBirth = new DateOnly(1992, 7, 18),
                            Email = "emilyd@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emily",
                            Gender = "Female",
                            LastName = "Davis",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMILYD@EXAMPLE.COM",
                            NormalizedUserName = "EMILYD@202",
                            PasswordHash = "AQAAAAIAAYagAAAAEMqpC1dLoRjJYy0U5ewSWDNMhZ9RypMScO6/eD7IrAV4HrLdfqeXiaOO6z1SzZpmnA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1b1a46b7-4b51-4538-ae0a-c7fe6c693b83",
                            TwoFactorEnabled = false,
                            UserName = "EmilyD@202"
                        },
                        new
                        {
                            Id = "5326BB55-A26F-47FE-ABC4-9DF44F7B0333",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "582ef659-b1af-474d-8614-d99546845ef0",
                            DateOfBirth = new DateOnly(1988, 9, 25),
                            Email = "michaelw@example.com",
                            EmailConfirmed = true,
                            FirstName = "Michael",
                            Gender = "Male",
                            LastName = "Wilson",
                            LockoutEnabled = false,
                            NormalizedEmail = "MICHAELW@EXAMPLE.COM",
                            NormalizedUserName = "MICHAELW@303",
                            PasswordHash = "AQAAAAIAAYagAAAAEOLxe/okEFpvwVKH8sqJek/n/Rc5jctg79UqZHBHvQBoGXzFuvMAXdNV9fjkIztk8w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fe616f68-588c-49db-93c6-8bb403269122",
                            TwoFactorEnabled = false,
                            UserName = "MichaelW@303"
                        },
                        new
                        {
                            Id = "B3945AB7-1F46-4829-9DEA-6860E283582F",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ea3bb958-6680-4457-9ac3-dfc459d994ef",
                            DateOfBirth = new DateOnly(1998, 4, 30),
                            Email = "sarahm@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sarah",
                            Gender = "Female",
                            LastName = "Miller",
                            LockoutEnabled = false,
                            NormalizedEmail = "SARAHM@EXAMPLE.COM",
                            NormalizedUserName = "SARAHM@404",
                            PasswordHash = "AQAAAAIAAYagAAAAEFltD+VoxiKkd9yEudWx9uI426L169H7l3u071/v0HNp/K8BadQfAnWF2E5EOHLyyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cd8ff0aa-7984-4ee5-880d-efef318277b3",
                            TwoFactorEnabled = false,
                            UserName = "SarahM@404"
                        },
                        new
                        {
                            Id = "3944C201-0184-4F97-83A6-B6E4852C961F",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0be4267a-6176-4481-8f18-e7837c59f01d",
                            DateOfBirth = new DateOnly(1975, 11, 12),
                            Email = "davidm@example.com",
                            EmailConfirmed = true,
                            FirstName = "David",
                            Gender = "Male",
                            LastName = "Moore",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVIDM@EXAMPLE.COM",
                            NormalizedUserName = "DAVIDM@505",
                            PasswordHash = "AQAAAAIAAYagAAAAEE8xTIsZ0o9F/1CphI0TTCby1BFiaXuvI0cMCnpUTq/injJa0ZRRbDYog0DwOGbMXw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ffdcbc31-5497-4fc6-bf8c-33fa3409c2e0",
                            TwoFactorEnabled = false,
                            UserName = "DavidM@505"
                        },
                        new
                        {
                            Id = "0A9232F3-BC6D-4610-AAFF-F1032831E847",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6e40e1db-21d9-40ef-9739-2ae88627aec8",
                            DateOfBirth = new DateOnly(1990, 6, 20),
                            Email = "laurat@example.com",
                            EmailConfirmed = true,
                            FirstName = "Laura",
                            Gender = "Female",
                            LastName = "Taylor",
                            LockoutEnabled = false,
                            NormalizedEmail = "LAURAT@EXAMPLE.COM",
                            NormalizedUserName = "LAURAT@606",
                            PasswordHash = "AQAAAAIAAYagAAAAEM1RuYTT/y/OPd1CaoELkylKPjx+Wc9ELd5jvxttL6XXS2hOy+b8Knrk/r52TAZ5tQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2c286a3d-8b34-46ad-974d-8e3316da31e7",
                            TwoFactorEnabled = false,
                            UserName = "LauraT@606"
                        },
                        new
                        {
                            Id = "049759F5-3AD8-46BF-89EE-AC51F3BEED88",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b717e19-83d7-4167-811b-76339e796681",
                            DateOfBirth = new DateOnly(1985, 2, 14),
                            Email = "chrisa@example.com",
                            EmailConfirmed = true,
                            FirstName = "Chris",
                            Gender = "Male",
                            LastName = "Anderson",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHRISA@EXAMPLE.COM",
                            NormalizedUserName = "CHRISA@707",
                            PasswordHash = "AQAAAAIAAYagAAAAEEB4FFlq9vu9WYleznKnh5HQKGr2ZodZ5yEcvLVHqarwQU6vevLNa6SfrKq23wcm/w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c8e15d70-078a-4bff-918b-63ee7a199b9f",
                            TwoFactorEnabled = false,
                            UserName = "ChrisA@707"
                        });
                });

            modelBuilder.Entity("GreenSphere.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("GreenSphere.Domain.Entities.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasAnnotation("Range", new[] { 1, 5 });

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductId", "CreatedById")
                        .IsUnique();

                    b.ToTable("Ratings", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "BE3B9D48-68F5-42E3-9371-E7964F96A25D",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "702C7401-F83C-4684-9421-9AA74FC40050",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "702C7401-F83C-4684-9421-9AA74FC40050",
                            RoleId = "BE3B9D48-68F5-42E3-9371-E7964F96A25D"
                        },
                        new
                        {
                            UserId = "3EB45CDA-F2EE-43E7-B9F1-D52562E05929",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "9818FAE0-A167-4808-A30D-BC7418A53CB0",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "FE2FB445-6562-49DD-B0A3-77E0A3A1C376",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "5B91855C-2D98-4E2B-B919-CDE322C9002D",
                            RoleId = "BE3B9D48-68F5-42E3-9371-E7964F96A25D"
                        },
                        new
                        {
                            UserId = "5326BB55-A26F-47FE-ABC4-9DF44F7B0333",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "B3945AB7-1F46-4829-9DEA-6860E283582F",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "3944C201-0184-4F97-83A6-B6E4852C961F",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "0A9232F3-BC6D-4610-AAFF-F1032831E847",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "049759F5-3AD8-46BF-89EE-AC51F3BEED88",
                            RoleId = "BE3B9D48-68F5-42E3-9371-E7964F96A25D"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GreenSphere.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.OwnsMany("GreenSphere.Domain.Entities.Identity.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTimeOffset>("CreatedOn")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("ExpiresOn")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset?>("RevokedOn")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApplicationUserId", "Id");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("GreenSphere.Domain.Entities.Product", b =>
                {
                    b.HasOne("GreenSphere.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GreenSphere.Domain.Entities.Rating", b =>
                {
                    b.HasOne("GreenSphere.Domain.Entities.Identity.ApplicationUser", "CreatedBy")
                        .WithMany("Ratings")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GreenSphere.Domain.Entities.Product", "Product")
                        .WithMany("Ratings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GreenSphere.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GreenSphere.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GreenSphere.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GreenSphere.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GreenSphere.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GreenSphere.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("GreenSphere.Domain.Entities.Product", b =>
                {
                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
