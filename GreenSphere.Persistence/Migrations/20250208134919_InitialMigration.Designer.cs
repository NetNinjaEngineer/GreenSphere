// <auto-generated />
using System;
using GreenSphere.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GreenSphere.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250208134919_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GreenSphere.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("GreenSphere.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CodeExpiration")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "702C7401-F83C-4684-9421-9AA74FC40050",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aa3d759f-ccc4-4a0e-b665-3cb97d92a7b6",
                            DateOfBirth = new DateOnly(2002, 1, 1),
                            Email = "me5260287@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mohamed",
                            Gender = "Male",
                            LastName = "Ehab",
                            LockoutEnabled = false,
                            NormalizedEmail = "ME5260287@GMAIL.COM",
                            NormalizedUserName = "MOEHAB@2002",
                            PasswordHash = "AQAAAAIAAYagAAAAEOzvujyRjxcVswKwoYxCiuGjWmoL03K6stkL7FE7dPVChCEsUUBxmNU4QXJxRxfTXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67e83bd0-5800-4833-86a1-265146629b7c",
                            TwoFactorEnabled = false,
                            UserName = "Moehab@2002"
                        },
                        new
                        {
                            Id = "3EB45CDA-F2EE-43E7-B9F1-D52562E05929",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "372aa472-da4f-4dd1-8893-f47b540d764c",
                            DateOfBirth = new DateOnly(1990, 5, 15),
                            Email = "johndoe@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            Gender = "Male",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHNDOE@EXAMPLE.COM",
                            NormalizedUserName = "JOHNDOE@123",
                            PasswordHash = "AQAAAAIAAYagAAAAEEuaHIkf3u/1GxLUmQCRQEE7P33fD0gNF5Wg3VEtpLdyauxDPqebwBkDZOfVbHog0w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "96b326a7-2398-46e5-8c80-599b1844c9f4",
                            TwoFactorEnabled = false,
                            UserName = "JohnDoe@123"
                        },
                        new
                        {
                            Id = "9818FAE0-A167-4808-A30D-BC7418A53CB0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "89199bf6-208a-4f62-ba54-4f929ce7c6fa",
                            DateOfBirth = new DateOnly(1985, 8, 22),
                            Email = "janesmith@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            Gender = "Female",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "JANESMITH@EXAMPLE.COM",
                            NormalizedUserName = "JANESMITH@456",
                            PasswordHash = "AQAAAAIAAYagAAAAEEwyyXn8PTv1bP6tvhjjFJ9Vmt3tUw4DyWbgSncftZULxGdoBDCSOhxN+vXf5pISzA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b19dbf84-9556-41a2-aadb-f6588db2f3f0",
                            TwoFactorEnabled = false,
                            UserName = "JaneSmith@456"
                        },
                        new
                        {
                            Id = "FE2FB445-6562-49DD-B0A3-77E0A3A1C376",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9992ef72-e105-40c0-bfa4-2e9dd13294a5",
                            DateOfBirth = new DateOnly(1995, 3, 10),
                            Email = "alicej@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            Gender = "Female",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICEJ@EXAMPLE.COM",
                            NormalizedUserName = "ALICEJ@789",
                            PasswordHash = "AQAAAAIAAYagAAAAECjIEscT32AH19UARY9pm/bzjpfL62DbEZh0FbniB+i7uGSMDYs8xp3ed4AFHgKsuw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "809ce159-2ea5-4bd0-8c04-b4577ea60325",
                            TwoFactorEnabled = false,
                            UserName = "AliceJ@789"
                        },
                        new
                        {
                            Id = "0821819C-64AE-4C73-96F2-4E607AA59D7E",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af7bf90f-df02-4c40-94ed-b0f1fd3d0dfa",
                            DateOfBirth = new DateOnly(1980, 12, 5),
                            Email = "bobbrown@example.com",
                            EmailConfirmed = true,
                            FirstName = "Bob",
                            Gender = "Male",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOBBROWN@EXAMPLE.COM",
                            NormalizedUserName = "BOBBROWN@101",
                            PasswordHash = "AQAAAAIAAYagAAAAEF707Fj1Wrl6z+KAeN14Kxov05BbMWN93kX340wSY7m8g2UTODdyV0jX6WO4j2gGDQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d6072d7d-a66e-49a4-9fe3-cf471933e0d7",
                            TwoFactorEnabled = false,
                            UserName = "BobBrown@101"
                        },
                        new
                        {
                            Id = "5B91855C-2D98-4E2B-B919-CDE322C9002D",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0a8fce8b-370c-486f-903f-f22f0ad7eb2d",
                            DateOfBirth = new DateOnly(1992, 7, 18),
                            Email = "emilyd@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emily",
                            Gender = "Female",
                            LastName = "Davis",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMILYD@EXAMPLE.COM",
                            NormalizedUserName = "EMILYD@202",
                            PasswordHash = "AQAAAAIAAYagAAAAEEctZCwETtgi0I3gB/CQYEyhQQB4s9zJ9Ag/WWNYx5U7fK2qFutC91+J8B3NSFYOrA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2029ce53-b3b7-4073-aab5-57586765822a",
                            TwoFactorEnabled = false,
                            UserName = "EmilyD@202"
                        },
                        new
                        {
                            Id = "5326BB55-A26F-47FE-ABC4-9DF44F7B0333",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee9b91ea-5b17-4fa5-82e2-944c9b7ae9c0",
                            DateOfBirth = new DateOnly(1988, 9, 25),
                            Email = "michaelw@example.com",
                            EmailConfirmed = true,
                            FirstName = "Michael",
                            Gender = "Male",
                            LastName = "Wilson",
                            LockoutEnabled = false,
                            NormalizedEmail = "MICHAELW@EXAMPLE.COM",
                            NormalizedUserName = "MICHAELW@303",
                            PasswordHash = "AQAAAAIAAYagAAAAEDI8wB2jPWLQ5xNEOSusfg5zfbaoBfvMizsxcPZRyMAUuWS5wDjcwiOXO4HGg5REPQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "469426b1-175a-4aaf-8e24-ab2b223c1d13",
                            TwoFactorEnabled = false,
                            UserName = "MichaelW@303"
                        },
                        new
                        {
                            Id = "B3945AB7-1F46-4829-9DEA-6860E283582F",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a57db13c-0d68-4d49-90a0-8e9d1d3c1ecb",
                            DateOfBirth = new DateOnly(1998, 4, 30),
                            Email = "sarahm@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sarah",
                            Gender = "Female",
                            LastName = "Miller",
                            LockoutEnabled = false,
                            NormalizedEmail = "SARAHM@EXAMPLE.COM",
                            NormalizedUserName = "SARAHM@404",
                            PasswordHash = "AQAAAAIAAYagAAAAEPmvLaoGR47PxeJ7msmvN1iozaIyd//kyXG84x0O+R2pxeBOgu1Gb7PIiOWv00GEyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0203ff0d-ee7c-4605-b6a7-8c0dfc50cb4d",
                            TwoFactorEnabled = false,
                            UserName = "SarahM@404"
                        },
                        new
                        {
                            Id = "3944C201-0184-4F97-83A6-B6E4852C961F",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "980437a0-3620-413a-bebc-3a4174a2534a",
                            DateOfBirth = new DateOnly(1975, 11, 12),
                            Email = "davidm@example.com",
                            EmailConfirmed = true,
                            FirstName = "David",
                            Gender = "Male",
                            LastName = "Moore",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVIDM@EXAMPLE.COM",
                            NormalizedUserName = "DAVIDM@505",
                            PasswordHash = "AQAAAAIAAYagAAAAEJL1BDSD1XsZk1+/ny7Si5zXZGV0X/Cdaqbf0KgZFTgoN+/AFe7ey5iihSYhBcMYVA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8d6d91bc-b8e4-4ab3-bf77-4f564f2aea61",
                            TwoFactorEnabled = false,
                            UserName = "DavidM@505"
                        },
                        new
                        {
                            Id = "0A9232F3-BC6D-4610-AAFF-F1032831E847",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aff952f7-4b5b-47de-9a9b-20227c85d079",
                            DateOfBirth = new DateOnly(1990, 6, 20),
                            Email = "laurat@example.com",
                            EmailConfirmed = true,
                            FirstName = "Laura",
                            Gender = "Female",
                            LastName = "Taylor",
                            LockoutEnabled = false,
                            NormalizedEmail = "LAURAT@EXAMPLE.COM",
                            NormalizedUserName = "LAURAT@606",
                            PasswordHash = "AQAAAAIAAYagAAAAEMjRGAKRAddQ/xQ3FnV3J/jnHxqPYQ7u+LcMI/Kz6J8R8o5Q4SDMwtvhGKs669cHLA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "55006865-b7e7-4e18-a9a5-bd237fd50e88",
                            TwoFactorEnabled = false,
                            UserName = "LauraT@606"
                        },
                        new
                        {
                            Id = "049759F5-3AD8-46BF-89EE-AC51F3BEED88",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d988c4f-1490-43e0-94a0-663e5ac12f11",
                            DateOfBirth = new DateOnly(1985, 2, 14),
                            Email = "chrisa@example.com",
                            EmailConfirmed = true,
                            FirstName = "Chris",
                            Gender = "Male",
                            LastName = "Anderson",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHRISA@EXAMPLE.COM",
                            NormalizedUserName = "CHRISA@707",
                            PasswordHash = "AQAAAAIAAYagAAAAEDLsZIwTTSe4EkOscImuXtuFSXHYo01BuqYgoILDWkWLWhdSI69r+6fE5+aAPfTIgg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc70e537-6382-4d52-82b9-cd199a2d5cec",
                            TwoFactorEnabled = false,
                            UserName = "ChrisA@707"
                        });
                });

            modelBuilder.Entity("GreenSphere.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("GreenSphere.Domain.Entities.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasAnnotation("Range", new[] { 1, 5 });

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductId", "CreatedById")
                        .IsUnique();

                    b.ToTable("Ratings", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "BE3B9D48-68F5-42E3-9371-E7964F96A25D",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "702C7401-F83C-4684-9421-9AA74FC40050",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "702C7401-F83C-4684-9421-9AA74FC40050",
                            RoleId = "BE3B9D48-68F5-42E3-9371-E7964F96A25D"
                        },
                        new
                        {
                            UserId = "3EB45CDA-F2EE-43E7-B9F1-D52562E05929",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "9818FAE0-A167-4808-A30D-BC7418A53CB0",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "FE2FB445-6562-49DD-B0A3-77E0A3A1C376",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "5B91855C-2D98-4E2B-B919-CDE322C9002D",
                            RoleId = "BE3B9D48-68F5-42E3-9371-E7964F96A25D"
                        },
                        new
                        {
                            UserId = "5326BB55-A26F-47FE-ABC4-9DF44F7B0333",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "B3945AB7-1F46-4829-9DEA-6860E283582F",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "3944C201-0184-4F97-83A6-B6E4852C961F",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "0A9232F3-BC6D-4610-AAFF-F1032831E847",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "049759F5-3AD8-46BF-89EE-AC51F3BEED88",
                            RoleId = "BE3B9D48-68F5-42E3-9371-E7964F96A25D"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GreenSphere.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.OwnsMany("GreenSphere.Domain.Entities.Identity.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTimeOffset>("CreatedOn")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("ExpiresOn")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset?>("RevokedOn")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApplicationUserId", "Id");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("GreenSphere.Domain.Entities.Product", b =>
                {
                    b.HasOne("GreenSphere.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GreenSphere.Domain.Entities.Rating", b =>
                {
                    b.HasOne("GreenSphere.Domain.Entities.Identity.ApplicationUser", "CreatedBy")
                        .WithMany("Ratings")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GreenSphere.Domain.Entities.Product", "Product")
                        .WithMany("Ratings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GreenSphere.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GreenSphere.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GreenSphere.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GreenSphere.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GreenSphere.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GreenSphere.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("GreenSphere.Domain.Entities.Product", b =>
                {
                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
