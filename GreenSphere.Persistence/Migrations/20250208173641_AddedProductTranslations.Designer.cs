// <auto-generated />
using System;
using GreenSphere.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GreenSphere.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250208173641_AddedProductTranslations")]
    partial class AddedProductTranslations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GreenSphere.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("GreenSphere.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CodeExpiration")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "702C7401-F83C-4684-9421-9AA74FC40050",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b22f9d87-f68f-4f69-95c5-2e4b84e8d2d2",
                            DateOfBirth = new DateOnly(2002, 1, 1),
                            Email = "me5260287@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mohamed",
                            Gender = "Male",
                            LastName = "Ehab",
                            LockoutEnabled = false,
                            NormalizedEmail = "ME5260287@GMAIL.COM",
                            NormalizedUserName = "MOEHAB@2002",
                            PasswordHash = "AQAAAAIAAYagAAAAEJznZIqYHGoIMa+VwEFDXtsdVEoFrQLcLj4l9gxCtclDyaLtJZY3OtXqObcCzMDjDA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3724a24c-a449-4684-8a9e-38a4b00a585b",
                            TwoFactorEnabled = false,
                            UserName = "Moehab@2002"
                        },
                        new
                        {
                            Id = "3EB45CDA-F2EE-43E7-B9F1-D52562E05929",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9cef81f4-b398-4a2d-8393-832ee36bd3ae",
                            DateOfBirth = new DateOnly(1990, 5, 15),
                            Email = "johndoe@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            Gender = "Male",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHNDOE@EXAMPLE.COM",
                            NormalizedUserName = "JOHNDOE@123",
                            PasswordHash = "AQAAAAIAAYagAAAAEJdeEvPJcLgAJW4u92ws7Xpei5yxnW1+nmkE0bZGwk8WNh76J4Elkkzd3keNj7ZXpg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4d5d89b8-938a-43c9-aa27-74cd92e90855",
                            TwoFactorEnabled = false,
                            UserName = "JohnDoe@123"
                        },
                        new
                        {
                            Id = "9818FAE0-A167-4808-A30D-BC7418A53CB0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92ec597d-0cf8-4cf2-b4b6-fb7814b3136a",
                            DateOfBirth = new DateOnly(1985, 8, 22),
                            Email = "janesmith@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            Gender = "Female",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "JANESMITH@EXAMPLE.COM",
                            NormalizedUserName = "JANESMITH@456",
                            PasswordHash = "AQAAAAIAAYagAAAAEERhXT6rygGEQr5A8sQ60vekmBlYHLtIW9E2gtZEKljIRfjjkhtsLRih5OwmwLeW/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "55e133d8-00ab-4867-aee8-b7d939b4ae9e",
                            TwoFactorEnabled = false,
                            UserName = "JaneSmith@456"
                        },
                        new
                        {
                            Id = "FE2FB445-6562-49DD-B0A3-77E0A3A1C376",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfd53c27-9962-43e1-bebc-e9fe05543092",
                            DateOfBirth = new DateOnly(1995, 3, 10),
                            Email = "alicej@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            Gender = "Female",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICEJ@EXAMPLE.COM",
                            NormalizedUserName = "ALICEJ@789",
                            PasswordHash = "AQAAAAIAAYagAAAAECPIkHg3MIv9duvSna9EH1oBqWSF/PQmxj2UI/DK301kS6gSQbUA0XUg9kr9cS6WTg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "65c5685f-34f3-46a2-818b-cad7fa20ac81",
                            TwoFactorEnabled = false,
                            UserName = "AliceJ@789"
                        },
                        new
                        {
                            Id = "0821819C-64AE-4C73-96F2-4E607AA59D7E",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cbaec969-86e3-437c-a472-79568c4a96ad",
                            DateOfBirth = new DateOnly(1980, 12, 5),
                            Email = "bobbrown@example.com",
                            EmailConfirmed = true,
                            FirstName = "Bob",
                            Gender = "Male",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOBBROWN@EXAMPLE.COM",
                            NormalizedUserName = "BOBBROWN@101",
                            PasswordHash = "AQAAAAIAAYagAAAAEDdq0H/gtOkHIGj5L7CAhj0UDVUCGaeceU++Lqa3Zgr8nyoleQmFvljLus2aPGuSCQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f77ae73e-db2a-46ee-b967-9294cc38be04",
                            TwoFactorEnabled = false,
                            UserName = "BobBrown@101"
                        },
                        new
                        {
                            Id = "5B91855C-2D98-4E2B-B919-CDE322C9002D",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f6be611a-7169-44b7-b51f-a1a901197104",
                            DateOfBirth = new DateOnly(1992, 7, 18),
                            Email = "emilyd@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emily",
                            Gender = "Female",
                            LastName = "Davis",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMILYD@EXAMPLE.COM",
                            NormalizedUserName = "EMILYD@202",
                            PasswordHash = "AQAAAAIAAYagAAAAEL2CAbk6+c1MtV/7FMHV0NixLyS5Efk97Ocmf3/WfCNHsyGiN5/Jt7rBa1mUUhJU9A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "935d776a-a529-43d2-8c95-60ecb0e308ce",
                            TwoFactorEnabled = false,
                            UserName = "EmilyD@202"
                        },
                        new
                        {
                            Id = "5326BB55-A26F-47FE-ABC4-9DF44F7B0333",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cdae050b-76f9-4290-b227-a876247b8e08",
                            DateOfBirth = new DateOnly(1988, 9, 25),
                            Email = "michaelw@example.com",
                            EmailConfirmed = true,
                            FirstName = "Michael",
                            Gender = "Male",
                            LastName = "Wilson",
                            LockoutEnabled = false,
                            NormalizedEmail = "MICHAELW@EXAMPLE.COM",
                            NormalizedUserName = "MICHAELW@303",
                            PasswordHash = "AQAAAAIAAYagAAAAEPLTN1a4qk8c+Q/co2arR6ykTWd95mrF0zDD8j9yHWNXTSNnLoLVtt4dq77M3UWEgQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b60ffcdd-8393-47fd-9da0-e417c5c25b8b",
                            TwoFactorEnabled = false,
                            UserName = "MichaelW@303"
                        },
                        new
                        {
                            Id = "B3945AB7-1F46-4829-9DEA-6860E283582F",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d45d10ef-4bf1-4845-acaf-153b2cdfc79f",
                            DateOfBirth = new DateOnly(1998, 4, 30),
                            Email = "sarahm@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sarah",
                            Gender = "Female",
                            LastName = "Miller",
                            LockoutEnabled = false,
                            NormalizedEmail = "SARAHM@EXAMPLE.COM",
                            NormalizedUserName = "SARAHM@404",
                            PasswordHash = "AQAAAAIAAYagAAAAENoBxJZeeSppSvR2uM3w2TraG1IKJ4MZmSrRz4wDTuMsOeKBthnq8F0BMiiD1RAcOQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "815e0687-b999-4652-9eed-8c92b7c7d014",
                            TwoFactorEnabled = false,
                            UserName = "SarahM@404"
                        },
                        new
                        {
                            Id = "3944C201-0184-4F97-83A6-B6E4852C961F",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ae172c3-ac98-4226-9f18-fca1742719a0",
                            DateOfBirth = new DateOnly(1975, 11, 12),
                            Email = "davidm@example.com",
                            EmailConfirmed = true,
                            FirstName = "David",
                            Gender = "Male",
                            LastName = "Moore",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVIDM@EXAMPLE.COM",
                            NormalizedUserName = "DAVIDM@505",
                            PasswordHash = "AQAAAAIAAYagAAAAEOdTe2YnqfSItulxpBaq598Sj49afkiSsRl9c/YYSP2Y4x513PyJhumbt1JXR1ZxAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f0eb28e1-1d49-493f-8a19-1e9d15ab1b9e",
                            TwoFactorEnabled = false,
                            UserName = "DavidM@505"
                        },
                        new
                        {
                            Id = "0A9232F3-BC6D-4610-AAFF-F1032831E847",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a99d1a86-37ef-48fd-a4ea-df17ef646119",
                            DateOfBirth = new DateOnly(1990, 6, 20),
                            Email = "laurat@example.com",
                            EmailConfirmed = true,
                            FirstName = "Laura",
                            Gender = "Female",
                            LastName = "Taylor",
                            LockoutEnabled = false,
                            NormalizedEmail = "LAURAT@EXAMPLE.COM",
                            NormalizedUserName = "LAURAT@606",
                            PasswordHash = "AQAAAAIAAYagAAAAENChEEIWRWM3mRg4RPmshK/oEXFO+6kBkF1NFiFra/5yHwoIdbmaDD6y3GV0sh2QYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3665da62-394b-483b-84d8-db6e5d4edb5e",
                            TwoFactorEnabled = false,
                            UserName = "LauraT@606"
                        },
                        new
                        {
                            Id = "049759F5-3AD8-46BF-89EE-AC51F3BEED88",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e6d583c9-a0c1-40b8-ba53-a1d8f1ee7189",
                            DateOfBirth = new DateOnly(1985, 2, 14),
                            Email = "chrisa@example.com",
                            EmailConfirmed = true,
                            FirstName = "Chris",
                            Gender = "Male",
                            LastName = "Anderson",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHRISA@EXAMPLE.COM",
                            NormalizedUserName = "CHRISA@707",
                            PasswordHash = "AQAAAAIAAYagAAAAEL1Dzb4V8znsd4RWwNDRuj/fKltuGLUwhU9OV9q53TM4JBcHs+yNe0nQPatqUcztaQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a1481e44-f444-4409-a91a-842a5302ec7d",
                            TwoFactorEnabled = false,
                            UserName = "ChrisA@707"
                        });
                });

            modelBuilder.Entity("GreenSphere.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("GreenSphere.Domain.Entities.ProductTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductTranslations", (string)null);
                });

            modelBuilder.Entity("GreenSphere.Domain.Entities.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasAnnotation("Range", new[] { 1, 5 });

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductId", "CreatedById")
                        .IsUnique();

                    b.ToTable("Ratings", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "BE3B9D48-68F5-42E3-9371-E7964F96A25D",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "702C7401-F83C-4684-9421-9AA74FC40050",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "702C7401-F83C-4684-9421-9AA74FC40050",
                            RoleId = "BE3B9D48-68F5-42E3-9371-E7964F96A25D"
                        },
                        new
                        {
                            UserId = "3EB45CDA-F2EE-43E7-B9F1-D52562E05929",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "9818FAE0-A167-4808-A30D-BC7418A53CB0",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "FE2FB445-6562-49DD-B0A3-77E0A3A1C376",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "5B91855C-2D98-4E2B-B919-CDE322C9002D",
                            RoleId = "BE3B9D48-68F5-42E3-9371-E7964F96A25D"
                        },
                        new
                        {
                            UserId = "5326BB55-A26F-47FE-ABC4-9DF44F7B0333",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "B3945AB7-1F46-4829-9DEA-6860E283582F",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "3944C201-0184-4F97-83A6-B6E4852C961F",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "0A9232F3-BC6D-4610-AAFF-F1032831E847",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "049759F5-3AD8-46BF-89EE-AC51F3BEED88",
                            RoleId = "BE3B9D48-68F5-42E3-9371-E7964F96A25D"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GreenSphere.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.OwnsMany("GreenSphere.Domain.Entities.Identity.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTimeOffset>("CreatedOn")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("ExpiresOn")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset?>("RevokedOn")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApplicationUserId", "Id");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("GreenSphere.Domain.Entities.Product", b =>
                {
                    b.HasOne("GreenSphere.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GreenSphere.Domain.Entities.ProductTranslation", b =>
                {
                    b.HasOne("GreenSphere.Domain.Entities.Product", "Product")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GreenSphere.Domain.Entities.Rating", b =>
                {
                    b.HasOne("GreenSphere.Domain.Entities.Identity.ApplicationUser", "CreatedBy")
                        .WithMany("Ratings")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GreenSphere.Domain.Entities.Product", "Product")
                        .WithMany("Ratings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GreenSphere.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GreenSphere.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GreenSphere.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GreenSphere.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GreenSphere.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GreenSphere.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("GreenSphere.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductTranslations");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
